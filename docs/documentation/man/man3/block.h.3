.TH "/home/runner/work/PEPITAS-Cryptocurrency/PEPITAS-Cryptocurrency/headers/blockchain/block.h" 3 "Sun Jun 13 2021" "PEPITAS CRYPTOCURRENCY" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/runner/work/PEPITAS-Cryptocurrency/PEPITAS-Cryptocurrency/headers/blockchain/block.h
.SH SYNOPSIS
.br
.PP
\fC#include <string\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <sys/stat\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <err\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br
\fC#include <openssl/sha\&.h>\fP
.br
\fC#include <openssl/pem\&.h>\fP
.br
\fC#include <openssl/rsa\&.h>\fP
.br
\fC#include <openssl/crypto\&.h>\fP
.br
\fC#include <fcntl\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include 'transaction\&.h'\fP
.br
\fC#include 'misc/files\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBBlockData\fP"
.br
.ti -1c
.RI "struct \fBBlock\fP"
.br
.ti -1c
.RI "struct \fBChunkBlockchain\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMAX_VALIDATORS_PER_BLOCK\fP   512"
.br
.ti -1c
.RI "#define \fBSIGNATURE_LEN\fP   256"
.br
.ti -1c
.RI "#define \fBCURRENT_CHUNK\fP   0"
.br
.ti -1c
.RI "#define \fBBLOCK_DATA_SIZE\fP   (SHA384_DIGEST_LENGTH * 2 + 1) + sizeof(size_t) + sizeof(uint16_t) + sizeof(time_t) + sizeof(int)"
.br
.ti -1c
.RI "#define \fBBLOCK_SIZE\fP   2048 + sizeof(size_t) + \fBBLOCK_DATA_SIZE\fP + SHA384_DIGEST_LENGTH * 2 + 1"
.br
.ti -1c
.RI "#define \fBMAX_TRANSACTIONS_PER_BLOCK\fP   16384"
.br
.ti -1c
.RI "#define \fBNB_BLOCK_PER_CHUNK\fP   10000"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBBlockData\fP \fBBlockData\fP"
.br
.ti -1c
.RI "typedef struct \fBBlock\fP \fBBlock\fP"
.br
.ti -1c
.RI "typedef struct \fBChunkBlockchain\fP \fBChunkBlockchain\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBBlock\fP * \fBget_genesis_block\fP ()"
.br
.ti -1c
.RI "\fBChunkBlockchain\fP * \fBload_blockchain\fP (size_t nb_chunk)"
.br
.RI "Loads a blockchain object with a padding of 'nb_chunk'\&. "
.ti -1c
.RI "\fBChunkBlockchain\fP * \fBload_last_blockchain\fP ()"
.br
.RI "Load the last local blockchain chunk\&. "
.ti -1c
.RI "size_t \fBget_last_block_height\fP ()"
.br
.RI "Get the last block height\&. "
.ti -1c
.RI "void \fBwrite_block_file\fP (\fBBlock\fP block)"
.br
.RI "Writes a block struct in a file\&. "
.ti -1c
.RI "\fBBlock\fP * \fBget_block\fP (size_t block_height)"
.br
.RI "Get a block object\&. "
.ti -1c
.RI "void \fBfree_block\fP (\fBBlock\fP *block)"
.br
.RI "Free a block struct\&. "
.ti -1c
.RI "\fBBlock\fP * \fBget_next_block\fP (\fBBlock\fP *block)"
.br
.RI "For a block of height \fCh\fP, returns the block of height \fCh+1\fP "
.ti -1c
.RI "\fBBlock\fP * \fBget_prev_block\fP (\fBBlock\fP *block)"
.br
.RI "For a block of height \fCh\fP, return the block of height \fCh-1\fP "
.ti -1c
.RI "char * \fBget_blockdata_data\fP (\fBBlock\fP *block, size_t *size)"
.br
.RI "Get the blockdata data object\&. "
.ti -1c
.RI "void \fBwrite_blockdata\fP (\fBBlockData\fP blockdata, int fd)"
.br
.RI "Writes blockdata in a file\&. "
.ti -1c
.RI "void \fBwrite_block\fP (\fBBlock\fP block, int fd)"
.br
.RI "Writes a block in a file\&. "
.ti -1c
.RI "void \fBconvert_data_to_block\fP (\fBBlock\fP *block, int fd)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BLOCK_DATA_SIZE   (SHA384_DIGEST_LENGTH * 2 + 1) + sizeof(size_t) + sizeof(uint16_t) + sizeof(time_t) + sizeof(int)"

.PP
Definition at line 26 of file block\&.h\&.
.SS "#define BLOCK_SIZE   2048 + sizeof(size_t) + \fBBLOCK_DATA_SIZE\fP + SHA384_DIGEST_LENGTH * 2 + 1"

.PP
Definition at line 27 of file block\&.h\&.
.SS "#define CURRENT_CHUNK   0"

.PP
Definition at line 24 of file block\&.h\&.
.SS "#define MAX_TRANSACTIONS_PER_BLOCK   16384"

.PP
Definition at line 29 of file block\&.h\&.
.SS "#define MAX_VALIDATORS_PER_BLOCK   512"

.PP
Definition at line 20 of file block\&.h\&.
.SS "#define NB_BLOCK_PER_CHUNK   10000"

.PP
Definition at line 30 of file block\&.h\&.
.SS "#define SIGNATURE_LEN   256"

.PP
Definition at line 22 of file block\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBBlock\fP \fBBlock\fP"

.SS "typedef struct \fBBlockData\fP \fBBlockData\fP"

.SS "typedef struct \fBChunkBlockchain\fP \fBChunkBlockchain\fP"

.SH "Function Documentation"
.PP 
.SS "void convert_data_to_block (\fBBlock\fP * block, int fd)"

.PP
Definition at line 172 of file block\&.c\&.
.SS "void free_block (\fBBlock\fP * block)"

.PP
Free a block struct\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The block to free 
.RE
.PP

.PP
Definition at line 202 of file block\&.c\&.
.SS "\fBBlock\fP* get_block (size_t block_height)"

.PP
Get a block object\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock_height\fP The height of the block 
.RE
.PP
\fBReturns\fP
.RS 4
Block* 
.RE
.PP

.PP
Definition at line 180 of file block\&.c\&.
.SS "char* get_blockdata_data (\fBBlock\fP * block, size_t * size)"

.PP
Get the blockdata data object\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The block 
.br
\fIsize\fP The size of the block 
.RE
.PP
\fBReturns\fP
.RS 4
char* 
.RE
.PP

.PP
Definition at line 241 of file block\&.c\&.
.SS "\fBBlock\fP* get_genesis_block ()"

.PP
Definition at line 35 of file block\&.c\&.
.SS "size_t get_last_block_height ()"

.PP
Get the last block height\&. 
.PP
\fBReturns\fP
.RS 4
size_t 
.RE
.PP

.PP
Definition at line 115 of file block\&.c\&.
.SS "\fBBlock\fP* get_next_block (\fBBlock\fP * block)"

.PP
For a block of height \fCh\fP, returns the block of height \fCh+1\fP 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The base block 
.RE
.PP
\fBReturns\fP
.RS 4
The next Block* 
.RE
.PP

.PP
Definition at line 221 of file block\&.c\&.
.SS "\fBBlock\fP* get_prev_block (\fBBlock\fP * block)"

.PP
For a block of height \fCh\fP, return the block of height \fCh-1\fP 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The base block 
.RE
.PP
\fBReturns\fP
.RS 4
The next Block* 
.RE
.PP

.PP
Definition at line 231 of file block\&.c\&.
.SS "\fBChunkBlockchain\fP* load_blockchain (size_t nb_chunk)"

.PP
Loads a blockchain object with a padding of 'nb_chunk'\&. 
.PP
\fBParameters\fP
.RS 4
\fInb_chunk\fP The chunk nb, if 0 : return the current blockchain object without modification 
.RE
.PP
\fBReturns\fP
.RS 4
ChunkBlockchain*, NULL if the \fBChunkBlockchain\fP is empty after switching 
.RE
.PP

.PP
Definition at line 69 of file block\&.c\&.
.SS "\fBChunkBlockchain\fP* load_last_blockchain ()"

.PP
Load the last local blockchain chunk\&. 
.PP
\fBParameters\fP
.RS 4
\fInb_chunk\fP 
.RE
.PP
\fBReturns\fP
.RS 4
ChunkBlockchain* 
.RE
.PP

.PP
Definition at line 110 of file block\&.c\&.
.SS "void write_block (\fBBlock\fP block, int fd)"

.PP
Writes a block in a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The block to write 
.br
\fIfd\fP the file descriptor of the file in which the block is written 
.RE
.PP

.PP
Definition at line 309 of file block\&.c\&.
.SS "void write_block_file (\fBBlock\fP block)"

.PP
Writes a block struct in a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The block to write 
.RE
.PP

.PP
Definition at line 121 of file block\&.c\&.
.SS "void write_blockdata (\fBBlockData\fP blockdata, int fd)"

.PP
Writes blockdata in a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIblockdata\fP The blockdata to write 
.br
\fIfd\fP The file descriptor of the file in which the blockdata is written 
.RE
.PP

.PP
Definition at line 277 of file block\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for PEPITAS CRYPTOCURRENCY from the source code\&.
