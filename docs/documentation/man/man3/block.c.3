.TH "/home/runner/work/PEPITAS-Cryptocurrency/PEPITAS-Cryptocurrency/src/core/blockchain/block.c" 3 "Sun Jun 13 2021" "PEPITAS CRYPTOCURRENCY" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/runner/work/PEPITAS-Cryptocurrency/PEPITAS-Cryptocurrency/src/core/blockchain/block.c
.SH SYNOPSIS
.br
.PP
\fC#include 'blockchain/block\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBChunkBlockchain\fP * \fBload_blockchain\fP (size_t nb_chunk)"
.br
.RI "Loads a blockchain object with a padding of 'nb_chunk'\&. "
.ti -1c
.RI "\fBChunkBlockchain\fP * \fBload_last_blockchain\fP ()"
.br
.RI "Load the last local blockchain chunk\&. "
.ti -1c
.RI "void \fBwrite_block_file\fP (\fBBlock\fP block)"
.br
.RI "Writes a block struct in a file\&. "
.ti -1c
.RI "void \fBconvert_data_to_blockdata\fP (\fBBlockData\fP *blockdata, int fd)"
.br
.ti -1c
.RI "void \fBconvert_data_to_block\fP (\fBBlock\fP *block, int fd)"
.br
.ti -1c
.RI "\fBBlock\fP * \fBget_block\fP (size_t \fBblock_height\fP)"
.br
.RI "Get a block object\&. "
.ti -1c
.RI "void \fBfree_block\fP (\fBBlock\fP *block)"
.br
.RI "Free a block struct\&. "
.ti -1c
.RI "\fBBlock\fP * \fBget_next_block\fP (\fBBlock\fP *block)"
.br
.RI "For a block of height \fCh\fP, returns the block of height \fCh+1\fP "
.ti -1c
.RI "\fBBlock\fP * \fBget_prev_block\fP (\fBBlock\fP *block)"
.br
.RI "For a block of height \fCh\fP, return the block of height \fCh-1\fP "
.ti -1c
.RI "char * \fBget_blockdata_data\fP (\fBBlock\fP *block, size_t *size)"
.br
.RI "Get the blockdata data object\&. "
.ti -1c
.RI "void \fBwrite_blockdata\fP (\fBBlockData\fP blockdata, int fd)"
.br
.RI "Writes blockdata in a file\&. "
.ti -1c
.RI "void \fBwrite_block\fP (\fBBlock\fP block, int fd)"
.br
.RI "Writes a block in a file\&. "
.ti -1c
.RI "void \fBupdate_wallet_with_block\fP (\fBBlock\fP block)"
.br
.ti -1c
.RI "void \fBdelete_epochs\fP (size_t height)"
.br
.ti -1c
.RI "\fBBlock\fP * \fBget_epoch\fP (int id, size_t height)"
.br
.ti -1c
.RI "void \fBclear_block\fP (\fBBlock\fP *block)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void clear_block (\fBBlock\fP * block)"

.PP
Definition at line 337 of file block\&.c\&.
.SS "void convert_data_to_block (\fBBlock\fP * block, int fd)"

.PP
Definition at line 103 of file block\&.c\&.
.SS "void convert_data_to_blockdata (\fBBlockData\fP * blockdata, int fd)"

.PP
Definition at line 70 of file block\&.c\&.
.SS "void delete_epochs (size_t height)"

.PP
Definition at line 301 of file block\&.c\&.
.SS "void free_block (\fBBlock\fP * block)"

.PP
Free a block struct\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The block to free 
.RE
.PP

.PP
Definition at line 133 of file block\&.c\&.
.SS "\fBBlock\fP* get_block (size_t block_height)"

.PP
Get a block object\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock_height\fP The height of the block 
.RE
.PP
\fBReturns\fP
.RS 4
Block* 
.RE
.PP

.PP
Definition at line 111 of file block\&.c\&.
.SS "char* get_blockdata_data (\fBBlock\fP * block, size_t * size)"

.PP
Get the blockdata data object\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The block 
.br
\fIsize\fP The size of the block 
.RE
.PP
\fBReturns\fP
.RS 4
char* 
.RE
.PP

.PP
Definition at line 159 of file block\&.c\&.
.SS "\fBBlock\fP* get_epoch (int id, size_t height)"

.PP
Definition at line 316 of file block\&.c\&.
.SS "\fBBlock\fP* get_next_block (\fBBlock\fP * block)"

.PP
For a block of height \fCh\fP, returns the block of height \fCh+1\fP 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The base block 
.RE
.PP
\fBReturns\fP
.RS 4
The next Block* 
.RE
.PP

.PP
Definition at line 139 of file block\&.c\&.
.SS "\fBBlock\fP* get_prev_block (\fBBlock\fP * block)"

.PP
For a block of height \fCh\fP, return the block of height \fCh-1\fP 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The base block 
.RE
.PP
\fBReturns\fP
.RS 4
The previous Block* 
.RE
.PP

.PP
Definition at line 149 of file block\&.c\&.
.SS "\fBChunkBlockchain\fP* load_blockchain (size_t nb_chunk)"

.PP
Loads a blockchain object with a padding of 'nb_chunk'\&. 
.PP
\fBParameters\fP
.RS 4
\fInb_chunk\fP The chunk nb, if 0 : return the current blockchain object without modification 
.RE
.PP
\fBReturns\fP
.RS 4
ChunkBlockchain*, NULL if the \fBChunkBlockchain\fP is empty after switching 
.RE
.PP

.PP
Definition at line 3 of file block\&.c\&.
.SS "\fBChunkBlockchain\fP* load_last_blockchain ()"

.PP
Load the last local blockchain chunk\&. 
.PP
\fBParameters\fP
.RS 4
\fInb_chunk\fP 
.RE
.PP
\fBReturns\fP
.RS 4
ChunkBlockchain* 
.RE
.PP

.PP
Definition at line 47 of file block\&.c\&.
.SS "void update_wallet_with_block (\fBBlock\fP block)"

.PP
Definition at line 236 of file block\&.c\&.
.SS "void write_block (\fBBlock\fP block, int fd)"

.PP
Writes a block in a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The block to write 
.br
\fIfd\fP the file descriptor of the file in which the block is written 
.RE
.PP

.PP
Definition at line 228 of file block\&.c\&.
.SS "void write_block_file (\fBBlock\fP block)"

.PP
Writes a block struct in a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIblock\fP The block to write 
.RE
.PP

.PP
Definition at line 52 of file block\&.c\&.
.SS "void write_blockdata (\fBBlockData\fP blockdata, int fd)"

.PP
Writes blockdata in a file\&. 
.PP
\fBParameters\fP
.RS 4
\fIblockdata\fP The blockdata to write 
.br
\fIfd\fP The file descriptor of the file in which the blockdata is written 
.RE
.PP

.PP
Definition at line 196 of file block\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for PEPITAS CRYPTOCURRENCY from the source code\&.
